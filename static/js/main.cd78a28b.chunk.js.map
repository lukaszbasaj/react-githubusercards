{"version":3,"sources":["components/form/form.js","components/card/card.js","components/card-list/cardList.js","serviceWorker.js","index.js"],"names":["Form","props","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","wrap","_context","prev","next","preventDefault","axios","get","concat","then","resp","onSubmit","data","catch","err","sent","stop","_x","apply","this","arguments","react_default","createElement","style","display","margin","width","position","left","transform","className","type","value","onChange","target","placeholder","required","Card","borderRadius","src","avatar_url","alt","fontSize","name","company","login","CardList","cards","map","card","components_card_card","assign","key","id","Boolean","window","location","hostname","match","ReactDOM","render","setCards","form_form","cardInfo","cardList","title","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QA8CeA,EA3CF,SAAAC,GAAS,IAAAC,EACYC,mBAAS,IADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbK,EADaH,EAAA,GACHI,EADGJ,EAAA,GAGdK,EAAY,eAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACnBJ,EAAMK,iBADaH,EAAAE,KAAA,EAGAE,IAChBC,IADgB,gCAAAC,OACoBjB,IACpCkB,KAAK,SAAAC,GACJzB,EAAM0B,SAASD,EAAKE,MACpBpB,EAAY,MAEbqB,MAAM,SAAAC,GAAG,MAAI,CAACA,KATE,OAAAZ,EAAAa,KAAA,wBAAAb,EAAAc,SAAAjB,MAAH,gBAAAkB,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,GAYlB,OACEC,EAAAxB,EAAAyB,cAAA,QAAMX,SAAUlB,GACd4B,EAAAxB,EAAAyB,cAAA,SACEC,MAAO,CACLC,QAAS,OACTC,OAAQ,EACRC,MAAO,QACPC,SAAU,WACVC,KAAM,MACNC,UAAW,oBAEbC,UAAU,+BACVC,KAAK,OACLC,MAAOzC,EACP0C,SAAU,SAAAjC,GAAK,OAAIR,EAAYQ,EAAMkC,OAAOF,QAC5CG,YAAY,kBACZC,UAAQ,IAGVf,EAAAxB,EAAAyB,cAAA,UACEQ,UAAU,2CACVC,KAAK,UAFP,uCCdSM,SApBF,SAAApD,GACX,OACEoC,EAAAxB,EAAAyB,cAAA,OAAKQ,UAAU,4CACbT,EAAAxB,EAAAyB,cAAA,OACEC,MAAO,CAAEG,MAAO,MAAOY,aAAc,OACrCC,IAAKtD,EAAMuD,WACXC,IAAI,WAGNpB,EAAAxB,EAAAyB,cAAA,OAAKC,MAAO,CAAEC,QAAS,eAAgBC,OAAQ,KAC7CJ,EAAAxB,EAAAyB,cAAA,OAAKQ,UAAU,OAAOP,MAAO,CAAEmB,SAAU,SAAzC,SACSzD,EAAM0D,KACbtB,EAAAxB,EAAAyB,cAAA,OAAKQ,UAAU,WAAf,aAAoC7C,EAAM2D,QAA1C,KACAvB,EAAAxB,EAAAyB,cAAA,OAAKQ,UAAU,SAAf,UAA+B7C,EAAM4D,MAArC,UCLKC,EARE,SAAA7D,GAAK,OACpBoC,EAAAxB,EAAAyB,cAAA,WACGrC,EAAM8D,MAAMC,IAAI,SAAAC,GAAI,OACnB5B,EAAAxB,EAAAyB,cAAC4B,EAAD7D,OAAA8D,OAAA,CAAMC,IAAKH,EAAKI,IAAQJ,QCMVK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCENC,IAASC,OACPvC,EAAAxB,EAAAyB,cAdU,WAAM,IAAApC,EACUC,mBAAS,IADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACT6D,EADS3D,EAAA,GACFyE,EADEzE,EAAA,GAKhB,OACEiC,EAAAxB,EAAAyB,cAAA,OAAKQ,UAAU,aACbT,EAAAxB,EAAAyB,cAACwC,EAAD,CAAMnD,SALY,SAAAoD,GACpBF,EAASd,EAAMvC,OAAOuD,OAKpB1C,EAAAxB,EAAAyB,cAAC0C,EAAD,CAAUjB,MAAOA,MAMrB,CAAKkB,MAAM,yBACXC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.cd78a28b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Form = props => {\n  const [username, setUsername] = useState(\"\");\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    const resp = await axios\n      .get(`https://api.github.com/users/${username}`)\n      .then(resp => {\n        props.onSubmit(resp.data);\n        setUsername(\"\");\n      })\n      .catch(err => [err]);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        style={{\n          display: \"flex\",\n          margin: 1,\n          width: \"99.5%\",\n          position: \"relative\",\n          left: \"50%\",\n          transform: \"translateX(-50%)\"\n        }}\n        className='form-control form-control-sm'\n        type='text'\n        value={username}\n        onChange={event => setUsername(event.target.value)}\n        placeholder='Github username'\n        required\n      />\n\n      <button\n        className='btn btn-outline-primary btn-sm btn-block'\n        type='submit'>\n        Show another user and to the list\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => {\n  return (\n    <div className='list-group-item  list-group-item-primary'>\n      <img\n        style={{ width: \"10%\", borderRadius: \"3px\" }}\n        src={props.avatar_url}\n        alt='avatar'\n      />\n\n      <div style={{ display: \"inline-block\", margin: 10 }}>\n        <div className='name' style={{ fontSize: \"100%\" }}>\n          Name: {props.name}\n          <div className='company'> Company: {props.company} </div>\n          <div className='login'>login: {props.login} </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card\";\n\nconst CardList = props => (\n  <div>\n    {props.cards.map(card => (\n      <Card key={card.id} {...card} />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Form from \"./components/form/form\";\nimport CardList from \"./components/card-list/cardList\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst App = () => {\n  const [cards, setCards] = useState([]);\n  const addNewProfile = cardInfo => {\n    setCards(cards.concat(cardInfo));\n  };\n  return (\n    <div className='container'>\n      <Form onSubmit={addNewProfile} />\n      <CardList cards={cards} />\n    </div>\n  );\n};\n\nReactDOM.render(\n  <App title='The GitHub Cards App' />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}